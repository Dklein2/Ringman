<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Heart</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Colors:
var c_textbox_back=make_color_rgb(240,240,240),
    c_textbox_border=c_gray,
    c_highlight_back=make_color_rgb(209,226,242),
    c_highlight_border=make_color_rgb(120,174,229);

draw_set_valign(fa_top);
draw_set_halign(fa_left);

var entries_ds=ds_list_create(),//This will hold every entry.
    disabled_entries_ds=ds_list_create(),//This will hold disabled entry POSITIONS
    count=string_count("|",mytext)+1,//Counts the number of entries.
    string_cut=mytext,
    longest_width=128,//The longest entry width. Menu box will be 128 pixels or the longest entry.
    BLOCK_HEIGHT,//Will hold height of each entry (Dynamic for different fonts)
    RECT_HEIGHT;//Entire height of the textbox
    
for (var i=0;i&lt;count;++i)//Time to split up the string.
{
    if (i==count-1)//If the last entry, no need to cut. Just pop into the ds_list.
    {
        ds_list_add(entries_ds,string_cut);
        if (string_width(string_cut)&gt;longest_width)
        longest_width=string_width(string_cut);
        
        continue;
    }
    var pos=string_pos("|",string_cut);
    var toadd=string_copy(string_cut,0,pos-1);
    if (string_width(toadd)&gt;longest_width)
        longest_width=string_width(toadd);
    ds_list_add(entries_ds,toadd);
    string_cut=string_copy(string_cut,pos+1,string_length(mytext));
}
var size=ds_list_size(entries_ds);//Grabs the number of entries.
var display_text="";//This text will be printed on top of the menu.
for (var i=0;i&lt;size;++i)
{
    var val=ds_list_find_value(entries_ds,i);
    if (string_pos("*",val)==0)
        display_text+=ds_list_find_value(entries_ds,i)+"#";//Sets up the text to print.
    else
    {
        display_text+="#";
        ds_list_add(disabled_entries_ds,i);
    }
}
    
BLOCK_HEIGHT=string_height(toadd);//Grabs the height from the last string part.
RECT_HEIGHT=string_height(display_text);
    
draw_set_color(0);
draw_set_alpha(0.35);//Draws the menu.
draw_rectangle(x+2,y+1,x+longest_width+9,y+RECT_HEIGHT+4,0);//Shadow
draw_set_alpha(1);
draw_set_color(c_textbox_back);
draw_rectangle(x,y-2,x+longest_width+7,y+RECT_HEIGHT+2,0);
draw_set_color(c_textbox_border);
draw_rectangle(x,y-2,x+longest_width+7,y+RECT_HEIGHT+2,1);

if (mouse_x&gt;=x&amp;&amp;mouse_x&lt;=x+longest_width+4&amp;&amp;mouse_y&gt;=y&amp;&amp;mouse_y&lt;=y+RECT_HEIGHT-2)
{//Detects when the mouse is over/presses on an entry.
    var dy=mouse_y-y;
    dy=floor(dy/BLOCK_HEIGHT)*BLOCK_HEIGHT+(BLOCK_HEIGHT/2);
    var SELECT_ID=floor((mouse_y-y)/BLOCK_HEIGHT);//Finds which entry is selected.
    var skip=false;
    for (var i=0;i&lt;ds_list_size(disabled_entries_ds);++i)//Skips disabled items
    {
        if (ds_list_find_value(disabled_entries_ds,i)==SELECT_ID)
        {
            skip=true;//If it found the entry, skip drawing.
            continue;//Exit loop early.
        }
    }
    
    if (!skip)
    {
        draw_set_color(c_highlight_back);
        draw_rectangle(x+2,y+dy-BLOCK_HEIGHT/2,x+longest_width+5,y+dy+BLOCK_HEIGHT/2,0);
        draw_set_color(c_highlight_border);
        draw_rectangle(x+2,y+dy-BLOCK_HEIGHT/2,x+longest_width+5,y+dy+BLOCK_HEIGHT/2,1);
        
        if (mouse_check_button_pressed(mb_left))
        {
            var ID=floor((mouse_y-y)/BLOCK_HEIGHT);
            set_menupressed_id(id,ID);
            instance_destroy();
        }
    }
}
else if (mouse_check_button_pressed(mb_left))//If NOT over an entry and pressed, just close. (No default is hit)
        instance_destroy();

draw_set_alpha(1);
draw_set_color(0);
draw_text(x+4,y,display_text);//Draws the actual text.
draw_set_color(c_gray);

for (var i=0;i&lt;ds_list_size(disabled_entries_ds);++i)
{
    var next_lines="",
        ID=ds_list_find_value(disabled_entries_ds,i);
    repeat (ID)
        next_lines+="#";
    var str=ds_list_find_value(entries_ds,ID);
    draw_text(x+4,y,next_lines+string_copy(str,2,string_length(str)-1));
}

ds_list_destroy(entries_ds);
ds_list_destroy(disabled_entries_ds);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,14</point>
    <point>34,34</point>
  </PhysicsShapePoints>
</object>
